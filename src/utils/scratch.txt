 
 	for (const auto &column : std::views::iota(32, 64))
	{
		for (const auto &row : std::views::iota(0, 96) | std::views::stride(32))
		{
			int num = column + row;
			dbg("{0:>03d} {0:#04x} {1:2c} ", num, num > 32 && num < 128 ? num : ' ');
		}
		dbgln();
	}

 
 32 0x20     64 0x40 @    96 0x60 `  
 33 0x21 !   65 0x41 A    97 0x61 a  
 34 0x22 "   66 0x42 B    98 0x62 b  
 35 0x23 #   67 0x43 C    99 0x63 c  
 36 0x24 $   68 0x44 D   100 0x64 d  
 37 0x25 %   69 0x45 E   101 0x65 e  
 38 0x26 &   70 0x46 F   102 0x66 f  
 39 0x27 '   71 0x47 G   103 0x67 g  
 40 0x28 (   72 0x48 H   104 0x68 h  
 41 0x29 )   73 0x49 I   105 0x69 i  
 42 0x2a *   74 0x4a J   106 0x6a j  
 43 0x2b +   75 0x4b K   107 0x6b k  
 44 0x2c ,   76 0x4c L   108 0x6c l  
 45 0x2d -   77 0x4d M   109 0x6d m  
 46 0x2e .   78 0x4e N   110 0x6e n  
 47 0x2f /   79 0x4f O   111 0x6f o  
 48 0x30 0   80 0x50 P   112 0x70 p  
 49 0x31 1   81 0x51 Q   113 0x71 q  
 50 0x32 2   82 0x52 R   114 0x72 r  
 51 0x33 3   83 0x53 S   115 0x73 s  
 52 0x34 4   84 0x54 T   116 0x74 t  
 53 0x35 5   85 0x55 U   117 0x75 u  
 54 0x36 6   86 0x56 V   118 0x76 v  
 55 0x37 7   87 0x57 W   119 0x77 w  
 56 0x38 8   88 0x58 X   120 0x78 x  
 57 0x39 9   89 0x59 Y   121 0x79 y  
 58 0x3a :   90 0x5a Z   122 0x7a z  
 59 0x3b ;   91 0x5b [   123 0x7b {  
 60 0x3c <   92 0x5c \   124 0x7c |  
 61 0x3d =   93 0x5d ]   125 0x7d }  
 62 0x3e >   94 0x5e ^   126 0x7e ~  
 63 0x3f ?   95 0x5f _   127 0x7f   



		
		
		
		std::string t{"-One-Two-Three-Four-Five-Six-"};
		const auto  dash      = [](char x, char y) { return not(x == '-' or y == '-'); };
		const auto  dash3     = [](char x) { return x == '-'; };
		const auto  not_empty = [](auto x) { return not x.empty(); };


		auto words = t | std::views::lazy_split('-') | std::views::filter(not_empty) | std::views::stride(2) |
					 std::ranges::to<std::vector<std::string>>();

		for (const auto& word : words)
		{
			dbgln("{}", word);
		}